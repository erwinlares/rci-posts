---
title: "Containerize your R project"
author: "Erwin"
format: html
---

## The quest for reproducibility 

> "In science, reproducibility is the key to credibility. Without it, we are just guessing." 
 - Richard Feynman
 



## Make it a Project!

In the R programming language, especially within the `tidyverse` ecosystem, using projects (typically via `RStudio Projects`) is a best practice that supports reproducibility, organization, and collaboration.

Using `Projects` enhances reproducibility by standardizing file paths and isolating environments, making analyses easier to rerun and share. They promote better organization through structured directories and project-specific settings, while also supporting collaboration by bundling all necessary files and configurations. Projects integrate with tools like `git` for version control and `renv` for package management, streamline workflows with consistent practices, and simplify onboarding for new contributors.

Using `Projects`, however, can introduce some challenges, particularly for beginners who may find concepts like relative paths and environment management confusing. For quick or simple scripts, setting up a full project might feel excessive. Tools like `renv`, while powerful, can be complex to configure and maintain, especially across different systems. If not used carefully, projects can suffer from portability issues due to hard-coded paths or system-specific settings. Additionally, relying heavily on `RStudio Projects` may limit flexibility when switching to other development environments.

## What do containers contain?

Containers are lightweight, portable units that package an application and all its dependencies so it can run consistently across different environments. They isolate software from the host system, ensuring that it behaves the same regardless of where it's deployed.

At a minimum, a Podman/Docker container that runs R code includes:

- Base OS Layer: A lightweight Linux distribution (e.g., Debian or Alpine).
- R Runtime: The R language interpreter installed.
- R Packages: Any required R packages (e.g., tidyverse, data.table).
- Your Code: The R scripts or notebooks to be executed.
- Dependencies: System libraries needed by R or its packages.
- Entrypoint: A command to run the R code when the container starts.

## Containerize your project 

There is a preparatory step we need to take to make the containerization possible: we need a way to capture the dependencies needed for the code to run. The way we will follow is by way of the R package `renv`.

The `renv` package in R is a dependency management tool designed to help users create reproducible environments for their `R` projects. It works by capturing the specific versions of `R` packages used in a project and storing them in a project-specific library, along with a lockfile (`renv.lock`) that records the exact package versions and sources. This allows users to recreate the same environment later or on a different machine, ensuring consistent results. renv also facilitates isolating project dependencies from the user's global `R` environment, minimizing conflicts and making collaboration and deployment more reliable.

Moving forward, I'll assume that the workflow we want to containerize exists within an `R` project and the `renv` package has successfully created an `renv.lock` file capturing all the package dependencies needed to run the workflow in question. 

```{r}
#| label: setup
#| echo: false
#| include: false

library(tidyverse)
library(glue)
library(stringi)

data <- read_csv("lab-active-data.csv") #reads in the data 

```

For our case scenario, let us assume we have a proper project with some R code that accomplishes a simple task: the script takes as an input a dataset about research facibilities that use a resource and as an output estimates how frequently that lab uses that particular resource across time.  

The dataset contains three columns: `year`,`lab_id`, and`usage`. The variable `year` is the year where usage data is recorded. `lab_id` is a character identifier for the lab. `usage` is a twelve-character string that indicates if the lab used the resource in a month of the corresponding `year`; `usage` looks like "FTFFTTTFTFFT", one for every month of the year, `T` if the resource was used, `F` otherwise.

Here's a slice of the dataset showing its structure. 

```{r}
slice_sample(data, n=10)
```

To gauge usage, we want to identify "peaks" of activity where the lab in question accessed the service. We differentiate between a month in which the service is accessed/used and a peak. A peak of usage is any numbers of consecutive months where the resource was utilized. The idea is that we can have, and we want to identified, sustained periods of activity that can last one or more months. In addition, we want to know how sustained the usage is. A lab may be having one peak of activity lasting 6 months of the year, and thus a usage frequency of 50%, whereas another lab may have two peaks, each one lasting only two months. As a result, the one-peak lab uses the resource more frequently than the two-peak labs in the same period of time.


## The logic 

The

```{r}




# args <- commandArgs(trailingOnly = TRUE)
# input_file <- args[1]
# start_year <- as.integer(args[2])
# start_month <- as.integer(args[3])
# end_year <- as.integer(args[4])
# end_month <- as.integer(args[5])
# output_file <- args[6]




count_peaks <- function(df, start_year, start_month, end_year, end_month) {

df %>%
  filter((year > start_year & year < end_year) |
         (year == start_year) |
         (year == end_year)) %>%
  mutate(
    usage_trimmed = case_when(
      year == start_year & year == end_year ~ substr(usage, start_month, end_month),
      year == start_year ~ substr(usage, start_month, 12),
      year == end_year ~ substr(usage, 1, end_month),
      TRUE ~ usage
    ),
    peaks = case_when(
      usage_trimmed == str_dup("F", str_length(usage_trimmed)) ~ 0,
      usage_trimmed == str_dup("T", str_length(usage_trimmed)) ~ 100,
      TRUE ~ stri_count_regex(usage_trimmed, "F*T+"),
    )
  )
}


how_active2 <- function(df, 
                        test_lab = unique(df$lab_id), 
                        start_year = df |> arrange(year) |> distinct(year) |>  head(n=1),
                        end_year = df |> arrange(year) |> distinct(year) |>  tail(n=1),
                        start_month = 1,
                        end_month = 12) {

# how_active() takes a tibble(year, lab_id, and usage)
# it returns a tibble where the first column is the lab_id and the second column is a
# list containing  contaning a two-column tibble with the year and the number of peaks for that year
# by default how_active() ranges over all the labs and all the years in the data argument
# how_active() takes optionally a specific lab names and specific years  
# by default it analysis the entire year, i.e. start_month = 1, end_month = 12

test_year <-  unique(df$year)

    df |> 
        filter(lab_id %in% test_lab, year %in% test_year) |> 
        group_by(lab_id) |>
        count_peaks(start_year, start_month, end_year , end_month) |>
        group_by(lab_id, year) |> 
        summarize(n_peaks = peaks, #number of peaks of activity
                  w_peak = str_count(usage_trimmed, pattern = 'T')/12, #weight of those peaks 
                  x_pattern = usage_trimmed, #extended pattern
                  .groups = "drop") |> 
        nest(.by = lab_id)

}

# code belows has to change to add the xtended pattern to the time range 
# x_pattern = get_usage_pattern(lab_id, 
#                               start_year = start_year,
#                               start_month = start_month,
#                               end_year = end_year, 
#                               end_month = end_month), #extended pattern

################################################
get_usage_pattern <- function(df, lab_id, start_year, start_month, end_year, end_month) {
  # Filter the data for the specified lab_id and year range
  filtered_df <- df[df$lab_id == lab_id & df$year >= start_year & df$year <= end_year, ]
  
  # Initialize the concatenated pattern
  concatenated_pattern <- ""
  
  # Loop through each row in the filtered data
  for (i in 1:nrow(filtered_df)) {
    year <- filtered_df$year[i]
    usage <- filtered_df$usage[i]
    
    # Determine the start and end indices for the substring
    start_idx <- if (year == start_year) start_month else 1
    end_idx <- if (year == end_year) end_month else 12
    
    # Extract and append the relevant substring
    concatenated_pattern <- paste0(concatenated_pattern, substr(usage, start_idx, end_idx))
  }
  
  return(concatenated_pattern)
}

################################################

how_active2(df = data) |> unnest(cols = c(data))


how_active2(df = data, start_year = 2010, end_year = 2010, start_month = 1, end_month = 12) |> unnest(cols = c(data))

get_usage_pattern(data, "Lake Mendota Research Collective", 2000, 1, 2025, 12)

was_active <- function(data, test_lab_id, test_year, test_month) {
#takes standarized data, year, lab_id, usage
#
data |> 
    filter(year == test_year, lab_id == test_lab_id) |> 
    pull(usage) |>
    str_sub(test_month, test_month) |> 
    (\(x) ifelse(x == "T", TRUE, FALSE))()

}

was_active(data, "Bascom Systems Lab", 2005, 8)

```

```{r}


# Function to extract usage pattern
# get_extended_pattern <- function(df, lab_id, start_year, start_month, end_year, end_month) {
#   # Filter for the lab and year range
#   filtered_df <- df |> 
#     filter(lab_id == lab_id,
#            year >= start_year,
#            year <= end_year)
#   
#   pattern <- ""
#   
#   for (i in 1:nrow(filtered_df)) {
#     year <- filtered_df$year[i]
#     usage <- filtered_df$usage[i]
#     
#     start_idx <- if (year == start_year) start_month else 1
#     end_idx <- if (year == end_year) end_month else 12
#     
#     pattern <- paste0(pattern, substr(usage, start_idx, end_idx))
#   }
#   
#   return(pattern)
# }


## New version of get_extended_usage

library(dplyr)
library(stringr)
library(purrr)

get_extended_usage <- function(df, lab_id, start_year, start_month, end_year, end_month) {
  df |> 
    filter(lab_id == !!lab_id, year >= start_year, year <= end_year) %>%
    arrange(year) |> 
    mutate(
      usage_split = str_split(usage, "", simplify = FALSE),
      usage_trimmed = pmap_chr(
        list(year, usage_split),
        function(y, u) {
          if (y == start_year && y == end_year) {
            str_c(u[start_month:end_month], collapse = "")
          } else if (y == start_year) {
            str_c(u[start_month:12], collapse = "")
          } else if (y == end_year) {
            str_c(u[1:end_month], collapse = "")
          } else {
            str_c(u, collapse = "")
          }
        }
      )
    ) |> 
    pull(usage_trimmed) %>%
    str_c(collapse = "")
}

# Function to create the plot
plot_usage_pattern <- function(df, lab_id, start_year, start_month, end_year, end_month) {
  pattern <- get_extended_usage(df, lab_id, start_year, start_month, end_year, end_month)
  num_months <- nchar(pattern)
  
  # Create time sequence
  start_date <- ymd(paste(start_year, start_month, "01", sep = "-"))
  time_seq <- seq.Date(from = start_date, by = "month", length.out = num_months)
  
  # Create data frame for plotting
  plot_df <- data.frame(
    time = time_seq,
    active = as.integer(strsplit(pattern, "")[[1]] == "T")
  )
  
  # Plot
  ggplot(plot_df, aes(x = time, y = active)) +
    geom_line() +
    labs(x = "time", y = "active", title = paste("Lab Usage Pattern for", lab_id)) +
    theme_minimal()
}

# Example usage

plot_usage_pattern(data, "Lake Mendota Research Collective", 2000, 1, 2000, 6)

get_extended_usage(data, "Lake Mendota Research Collective", 2000, 1, 2001, 1)
get_extended_usage(data, "Bascom Systems Lab", 2000, 2000, 1, 12)
```

Look at the plot for Lake Mendota Research Collective, we see that they actively used the ELN service for the months of February and March, but have stopped since.  



